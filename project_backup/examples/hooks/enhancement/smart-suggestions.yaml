name: "smart-suggestions"
description: "Generate context-aware suggestions based on current project state and user activity"
version: "1.0"
type: "enhancement"
trigger: "on_file_open"
timeout: 45
enabled: true

# Configuration for intelligent suggestion generation
config:
  # Suggestion types and their configurations
  suggestion_types:
    # Code improvement suggestions
    code_improvement:
      enabled: true
      triggers:
        - "file_open"
        - "file_save"
      file_patterns:
        - "**/*.py"
        - "**/*.js"
        - "**/*.ts"
        - "**/*.java"
        - "**/*.cpp"
        - "**/*.c"
      analysis_depth: "medium"
      max_suggestions: 5
      priority: 8

    # Documentation suggestions
    documentation:
      enabled: true
      triggers:
        - "file_open"
        - "directory_change"
      file_patterns:
        - "**/*.md"
        - "**/*.rst"
        - "**/*.txt"
        - "**/README*"
        - "**/CHANGELOG*"
      analysis_depth: "light"
      max_suggestions: 3
      priority: 6

    # Testing suggestions
    testing:
      enabled: true
      triggers:
        - "file_save"
        - "test_run"
      file_patterns:
        - "**/*test*.py"
        - "**/*spec*.js"
        - "**/*test*.js"
        - "**/*.test.ts"
      analysis_depth: "deep"
      max_suggestions: 4
      priority: 9

    # Security suggestions
    security:
      enabled: true
      triggers:
        - "file_save"
        - "commit_prepare"
      file_patterns:
        - "**/*.py"
        - "**/*.js"
        - "**/*.ts"
        - "**/*.yml"
        - "**/*.yaml"
        - "**/Dockerfile*"
      analysis_depth: "deep"
      max_suggestions: 3
      priority: 10

    # Performance suggestions
    performance:
      enabled: true
      triggers:
        - "file_save"
      file_patterns:
        - "**/*.py"
        - "**/*.js"
        - "**/*.ts"
        - "**/*.sql"
      analysis_depth: "medium"
      max_suggestions: 2
      priority: 7

    # Best practices suggestions
    best_practices:
      enabled: true
      triggers:
        - "file_open"
        - "directory_change"
      file_patterns:
        - "**/*"
      analysis_depth: "light"
      max_suggestions: 3
      priority: 5

  # Relevance scoring configuration
  relevance_scoring:
    # Factors that influence suggestion relevance
    factors:
      # How recently the file was modified (higher = more relevant)
      recency_weight: 0.2

      # How frequently the file is accessed (higher = more relevant)
      frequency_weight: 0.15

      # How well the suggestion matches current context (higher = more relevant)
      context_match_weight: 0.25

      # How complex/important the suggested change is (higher = more relevant)
      impact_weight: 0.2

      # How confident the system is in the suggestion (higher = more relevant)
      confidence_weight: 0.2

    # Minimum relevance score to show suggestion (0.0 - 1.0)
    min_relevance_score: 0.4

    # Maximum age of suggestions before they're considered stale (hours)
    max_suggestion_age: 24

  # Context integration settings
  context_integration:
    # Use loaded contexts to inform suggestions
    use_active_contexts: true

    # Weight given to context-specific suggestions
    context_suggestion_weight: 1.5

    # Contexts that provide suggestion patterns
    suggestion_contexts:
      - "contexts/domains/data-science-best-practices.md"
      - "contexts/domains/security-guidelines.md"
      - "contexts/domains/devops-methodologies.md"
      - "contexts/workflows/code-review-process.md"
      - "contexts/workflows/testing-strategies.md"

  # Machine learning and pattern recognition
  pattern_recognition:
    # Enable learning from user actions
    learn_from_user: true

    # File to store learned patterns
    pattern_storage: ".kiro/suggestions/learned_patterns.json"

    # Common code patterns to recognize
    code_patterns:
      - "missing_error_handling"
      - "unused_imports"
      - "long_functions"
      - "missing_docstrings"
      - "hardcoded_values"
      - "security_vulnerabilities"
      - "performance_bottlenecks"
      - "code_duplication"

  # Output formatting
  output_format:
    # How to present suggestions to the user
    presentation_style: "contextual" # contextual, list, inline

    # Include confidence scores in output
    show_confidence: true

    # Include reasoning for suggestions
    show_reasoning: true

    # Group related suggestions together
    group_suggestions: true

# Execution script
script: "smart_suggestions.py"

# Conditions for when this hook should run
conditions:
  - trigger: "file_open"
    file_types: [".py", ".js", ".ts", ".md", ".yml", ".yaml"]
  - trigger: "file_save"
    project_type: ["any"]
  - trigger: "directory_change"
    project_type: ["any"]

# Context sources that inform suggestion generation
context:
  sources:
    - "contexts/domains/data-science-best-practices.md"
    - "contexts/domains/security-guidelines.md"
    - "contexts/workflows/code-review-process.md"
    - "contexts/workflows/testing-strategies.md"
  tags: ["suggestions", "intelligence", "code-analysis", "best-practices"]
  priority: 7

# Metadata
metadata:
  author: "AI Configurator Team"
  category: "enhancement"
  complexity: "high"
  prerequisites:
    - "Python 3.8+"
    - "Project with source code"
    - "Active context system"
  related_hooks:
    - "context-switcher"
    - "code-quality-check"
    - "auto-documentation"
  examples:
    - "Suggests adding error handling when opening files without try-catch blocks"
    - "Recommends security improvements for authentication code"
    - "Proposes performance optimizations for database queries"
    - "Suggests documentation improvements for undocumented functions"
