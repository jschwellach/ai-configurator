{
    // ============================================================================
    // COMPLETE DEVELOPMENT SETUP WORKFLOW
    // ============================================================================
    // This is a comprehensive development workflow that integrates multiple
    // contexts and automation hooks to create a complete development environment.
    // It combines development best practices, code quality automation, and
    // documentation generation for a full-featured development experience.
    // ============================================================================
    // METADATA SECTION
    "metadata": {
        "name": "complete-dev-setup",
        "description": "Complete development workflow with integrated contexts and automation hooks",
        "category": "workflow",
        "version": "1.0.0",
        "author": "AI Configurator Team",
        "created": "2024-01-01",
        "tags": [
            "development",
            "automation",
            "code-quality",
            "documentation",
            "workflow",
            "complete-setup"
        ],
        "complexity": "high",
        "prerequisites": [
            "Python 3.8+",
            "Git version control",
            "Code editor/IDE",
            "Basic command line knowledge"
        ],
        "related_templates": [
            "devops-engineer",
            "data-scientist",
            "security-specialist"
        ]
    },
    // CONTEXT PATHS SECTION
    // ============================================================================
    // Comprehensive set of contexts for complete development workflow:
    // - Core development guidelines and best practices
    // - Code review processes and quality standards
    // - Testing strategies and methodologies
    // - Technical writing and documentation standards
    // - Project delivery and management practices
    // ============================================================================
    "paths": [
        // Core development contexts
        "contexts/development-guidelines.md",
        "examples/contexts/workflows/code-review-process.md",
        "examples/contexts/workflows/testing-strategies.md",
        "examples/contexts/domains/technical-writing-standards.md",
        "contexts/project-delivery.md",
        // Project-specific contexts
        "README.md",
        "?CONTRIBUTING.md",
        "?docs/**/*.md",
        "?tests/**/*.md",
        "?scripts/**/*.md",
        // Code and configuration files for context
        "?src/**/*.py",
        "?lib/**/*.py",
        "?package.json",
        "?requirements*.txt",
        "?pyproject.toml",
        "?setup.py",
        "?Dockerfile*",
        "?docker-compose*.yml",
        "?.github/**/*.yml",
        "?.github/**/*.yaml",
        "?Makefile",
        "?tox.ini",
        "?.pre-commit-config.yaml"
    ],
    // HOOKS SECTION
    // ============================================================================
    // Integrated automation hooks for complete development workflow:
    // - Environment setup and dependency management
    // - Code quality checks and linting
    // - Automated documentation generation
    // - Testing automation and coverage reporting
    // - Git workflow automation
    // ============================================================================
    "hooks": {
        // Environment setup - initializes development environment
        "environment-setup": {
            "enabled": true,
            "description": "Set up complete development environment with dependencies and tools",
            "trigger": "on_session_start",
            "config": {
                "python_version": "3.8+",
                "virtual_env": true,
                "install_dependencies": true,
                "setup_pre_commit": true,
                "configure_git": true,
                "install_dev_tools": [
                    "black",
                    "flake8",
                    "pytest",
                    "mypy",
                    "isort",
                    "bandit"
                ],
                "create_directories": [
                    "src/",
                    "tests/",
                    "docs/",
                    "scripts/",
                    "reports/"
                ],
                "template_files": [
                    ".gitignore",
                    ".pre-commit-config.yaml",
                    "pytest.ini",
                    "setup.cfg"
                ]
            }
        },
        // Code quality automation - comprehensive code analysis
        "code-quality-check": {
            "enabled": true,
            "description": "Automated code quality analysis with multiple linters and security checks",
            "trigger": "on_file_save",
            "config": {
                "file_patterns": [
                    "src/**/*.py",
                    "lib/**/*.py",
                    "scripts/**/*.py",
                    "tests/**/*.py"
                ],
                "linters": [
                    "flake8",
                    "black",
                    "isort",
                    "mypy",
                    "bandit",
                    "pylint"
                ],
                "quality_gates": {
                    "max_line_length": 88,
                    "max_complexity": 10,
                    "min_test_coverage": 80,
                    "max_security_issues": 0
                },
                "auto_fix": true,
                "generate_reports": true,
                "report_output": "reports/quality/",
                "fail_on_errors": false
            }
        },
        // Automated documentation generation
        "auto-documentation": {
            "enabled": true,
            "description": "Generate comprehensive project documentation automatically",
            "trigger": "on_commit",
            "config": {
                "source_patterns": [
                    "src/**/*.py",
                    "lib/**/*.py",
                    "README.md",
                    "docs/**/*.md"
                ],
                "output_formats": [
                    "markdown",
                    "html"
                ],
                "output_directory": "docs/generated/",
                "include_sections": [
                    "api_reference",
                    "code_structure",
                    "changelog",
                    "dependencies",
                    "installation_guide",
                    "usage_examples"
                ],
                "auto_generate": [
                    "api_docs",
                    "module_index",
                    "dependency_graph",
                    "coverage_report"
                ]
            }
        },
        // Testing automation
        "test-automation": {
            "enabled": true,
            "description": "Automated testing with coverage reporting and quality metrics",
            "trigger": "on_file_save",
            "config": {
                "test_patterns": [
                    "tests/**/*.py",
                    "test_*.py",
                    "*_test.py"
                ],
                "test_runner": "pytest",
                "coverage_threshold": 80,
                "generate_coverage_report": true,
                "coverage_formats": [
                    "html",
                    "xml",
                    "json"
                ],
                "coverage_output": "reports/coverage/",
                "run_on_save": true,
                "parallel_execution": true,
                "test_discovery": true
            }
        },
        // Git workflow automation
        "git-workflow": {
            "enabled": true,
            "description": "Automated git workflow with pre-commit hooks and branch management",
            "trigger": "on_git_event",
            "config": {
                "pre_commit_hooks": [
                    "code-quality-check",
                    "test-automation",
                    "security-scan"
                ],
                "branch_protection": {
                    "main": {
                        "require_pr": true,
                        "require_reviews": 1,
                        "require_tests": true
                    }
                },
                "auto_format": true,
                "commit_message_validation": true,
                "conventional_commits": true,
                "auto_changelog": true
            }
        },
        // Security scanning
        "security-scan": {
            "enabled": true,
            "description": "Automated security vulnerability scanning and dependency checks",
            "trigger": "on_dependency_change",
            "config": {
                "scan_types": [
                    "dependency_vulnerabilities",
                    "code_security",
                    "secrets_detection",
                    "license_compliance"
                ],
                "tools": [
                    "bandit",
                    "safety",
                    "semgrep",
                    "truffleHog"
                ],
                "severity_threshold": "medium",
                "report_output": "reports/security/",
                "fail_on_critical": true,
                "auto_update_dependencies": false
            }
        },
        // Performance monitoring
        "performance-monitor": {
            "enabled": false,
            "description": "Monitor code performance and identify bottlenecks",
            "trigger": "on_test_run",
            "config": {
                "profiling_enabled": true,
                "benchmark_tests": true,
                "memory_profiling": true,
                "performance_thresholds": {
                    "max_execution_time": "5s",
                    "max_memory_usage": "100MB"
                },
                "report_output": "reports/performance/",
                "track_regressions": true
            }
        }
    },
    // SETTINGS SECTION
    // ============================================================================
    // Optimized settings for complete development workflow
    // ============================================================================
    "settings": {
        // Auto-reload contexts when files change
        "auto_reload": true,
        // Higher context limit for comprehensive development
        "max_contexts": 150,
        // Validate all contexts
        "validate_contexts": true,
        // Detailed logging for development feedback
        "log_level": "info",
        // Development workflow specific settings
        "development_settings": {
            // Default Python interpreter
            "python_interpreter": "python3",
            // Virtual environment directory
            "venv_directory": ".venv",
            // Default test directory
            "test_directory": "tests/",
            // Default source directory
            "source_directory": "src/",
            // Default documentation directory
            "docs_directory": "docs/",
            // Default reports directory
            "reports_directory": "reports/",
            // Enable automatic formatting
            "auto_format": true,
            // Enable automatic imports sorting
            "auto_sort_imports": true,
            // Enable type checking
            "type_checking": true,
            // Enable security scanning
            "security_scanning": true,
            // Enable performance monitoring
            "performance_monitoring": false,
            // Git integration settings
            "git_integration": {
                "auto_commit": false,
                "pre_commit_hooks": true,
                "conventional_commits": true,
                "auto_push": false
            },
            // CI/CD integration
            "ci_cd_integration": {
                "github_actions": true,
                "gitlab_ci": false,
                "jenkins": false
            },
            // IDE integration
            "ide_integration": {
                "vscode_settings": true,
                "pycharm_settings": false,
                "vim_settings": false
            }
        }
    }
    // ============================================================================
    // COMPLETE DEVELOPMENT SETUP CUSTOMIZATION NOTES
    // ============================================================================
    // This workflow provides a comprehensive development environment with:
    // 
    // 1. AUTOMATED ENVIRONMENT SETUP:
    //    - Virtual environment creation and management
    //    - Dependency installation and management
    //    - Development tools configuration
    //    - Git hooks and workflow setup
    // 
    // 2. CONTINUOUS CODE QUALITY:
    //    - Real-time code analysis and linting
    //    - Automated formatting and import sorting
    //    - Security vulnerability scanning
    //    - Performance monitoring and profiling
    // 
    // 3. COMPREHENSIVE TESTING:
    //    - Automated test execution on file changes
    //    - Coverage reporting and quality gates
    //    - Performance benchmarking
    //    - Integration with CI/CD pipelines
    // 
    // 4. AUTOMATED DOCUMENTATION:
    //    - API documentation generation
    //    - Code structure documentation
    //    - Changelog and release notes
    //    - Usage examples and tutorials
    // 
    // 5. GIT WORKFLOW INTEGRATION:
    //    - Pre-commit hooks for quality gates
    //    - Branch protection and review requirements
    //    - Conventional commit message validation
    //    - Automated changelog generation
    // 
    // To customize this workflow for specific needs:
    // 
    // For Web Development:
    // - Add JavaScript/TypeScript contexts and hooks
    // - Include frontend testing frameworks
    // - Add build and deployment automation
    // 
    // For Data Science Projects:
    // - Include data science contexts
    // - Add Jupyter notebook support
    // - Include ML model validation hooks
    // 
    // For DevOps/Infrastructure:
    // - Add infrastructure as code contexts
    // - Include container and orchestration hooks
    // - Add deployment automation
    // 
    // For Team Collaboration:
    // - Enable all git workflow features
    // - Add team-specific coding standards
    // - Include code review automation
    // - Add notification integrations
    // ============================================================================
}